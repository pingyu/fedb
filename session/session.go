//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.
//
// some code copied from Copyright 2016 PingCAP, Inc.
// https://github.com/pingcap/tidb/blob/source-code/session.go
//

package session

import (
	"context"
	"fmt"
	"time"

	"github.com/opentracing/opentracing-go"

	"github.com/pingcap/errors"
	"github.com/pingcap/parser"
	"github.com/pingcap/parser/ast"
	"github.com/pingcap/parser/charset"
	"github.com/pingcap/parser/terror"
	log "github.com/sirupsen/logrus"

	"fedb/kv"
	"fedb/sessionctx"
	"fedb/sessionctx/variable"
	"fedb/util"
	"fedb/util/sqlexec"
)

// Session context
type Session interface {
	sessionctx.Context
	//Status() uint16                                               // Flag of current status, such as autocommit.
	//LastInsertID() uint64                                         // LastInsertID is the last inserted auto_increment ID.
	//LastMessage() string                                          // LastMessage is the info message that may be generated by last command
	//AffectedRows() uint64                                         // Affected rows by latest executed stmt.
	Execute(context.Context, string) ([]sqlexec.RecordSet, error) // Execute a sql statement.
	//String() string                                               // String is used to debug.
	//CommitTxn(context.Context) error
	//RollbackTxn(context.Context)
	// PrepareStmt executes prepare statement in binary protocol.
	//PrepareStmt(sql string) (stmtID uint32, paramCount int, fields []*ast.ResultField, err error)
	// ExecutePreparedStmt executes a prepared statement.
	//ExecutePreparedStmt(ctx context.Context, stmtID uint32, param ...interface{}) (sqlexec.RecordSet, error)
	//DropPreparedStmt(stmtID uint32) error
	SetClientCapability(uint32) Session // Set client capability flags.
	SetConnectionID(uint64) Session
	//SetCommandValue(byte)
	//SetProcessInfo(string, time.Time, byte)
	//SetTLSState(*tls.ConnectionState)
	SetCollation(coID int) error
	//SetSessionManager(util.SessionManager)
	Close()
	//Auth(user *auth.UserIdentity, auth []byte, salt []byte) bool
	//ShowProcess() util.ProcessInfo
	// PrePareTxnCtx is exported for test.
	PrepareTxnCtx(context.Context)
	// FieldList returns fields list of a table.
	//FieldList(tableName string) (fields []*ast.ResultField, err error)
}

type session struct {
	// processInfo is used by ShowProcess(), and should be modified atomically.
	//processInfo atomic.Value
	txn TxnState

	// mu struct {
	// 	sync.RWMutex
	// 	values map[fmt.Stringer]interface{}
	// }

	store kv.Storage

	parser *parser.Parser

	//preparedPlanCache *kvcache.SimpleLRUCache

	sessionVars *variable.SessionVars
	//sessionManager util.SessionManager

	//statsCollector *statistics.SessionStatsCollector
	// ddlOwnerChecker is used in `select tidb_is_ddl_owner()` statement;
	//ddlOwnerChecker owner.DDLOwnerChecker
}

var (
	_ Session = (*session)(nil)
)

// CreateSession creates a new session environment.
func CreateSession(store kv.Storage) (Session, error) {
	s := &session{
		store:       store,
		parser:      parser.New(),
		sessionVars: variable.NewSessionVars(),
	}
	s.txn.init()
	return s, nil
}

func (s *session) SetConnectionID(connectionID uint64) Session {
	s.sessionVars.ConnectionID = connectionID
	return s
}

func (s *session) SetClientCapability(capability uint32) Session {
	s.sessionVars.ClientCapability = capability
	return s
}

func (s *session) SetCollation(coID int) error {
	cs, co, err := charset.GetCharsetInfoByID(coID)
	if err != nil {
		return errors.Trace(err)
	}
	for _, v := range variable.SetNamesVariables {
		terror.Log(errors.Trace(s.sessionVars.SetSystemVar(v, cs)))
	}
	terror.Log(errors.Trace(s.sessionVars.SetSystemVar(variable.CollationConnection, co)))
	return nil
}

func (s *session) Close() {
	// statsCollector
	// RoolbackTxn
}

type visitor struct{}

func (v *visitor) Enter(in ast.Node) (out ast.Node, skipChildren bool) {
	fmt.Printf("Enter %T\n", in)
	return in, false
}

func (v *visitor) Leave(in ast.Node) (out ast.Node, ok bool) {
	fmt.Printf("Leave: %T\n", in)
	return in, true
}

// Execute a sql statement.
func (s *session) Execute(ctx context.Context, sql string) (recordSets []sqlexec.RecordSet, err error) {
	log.Infof("sql: %v", sql)

	if span := opentracing.SpanFromContext(ctx); span != nil && span.Tracer() != nil {
		span1 := span.Tracer().StartSpan("session.Execute", opentracing.ChildOf(span.Context()))
		defer span1.Finish()
	}
	recordSets, err = s.execute(ctx, sql)
	return
}

func (s *session) execute(ctx context.Context, sql string) (recordSets []sqlexec.RecordSet, err error) {
	s.PrepareTxnCtx(ctx)
	//connID := s.sessionVars.ConnectionID

	charsetInfo, collation := s.sessionVars.GetCharsetInfo()

	stmtNodes, err := s.parser.Parse(sql, charsetInfo, collation)
	if err != nil {
		// rollback
		return nil, util.SyntaxError(err)
	}

	for _, stmtNode := range stmtNodes {
		v := visitor{}
		stmtNode.Accept(&v)
	}
	//TODO
	//compiler

	return nil, nil
}

// PrepareTxnCtx starts a goroutine to begin a transaction if needed, and creates a new transaction context.
// It is called before execute a sql query
func (s *session) PrepareTxnCtx(ctx context.Context) {
	if s.txn.validOrPending() {
		return
	}

	txnFuture := s.getTxnFuture(ctx)
	s.txn.changeInvalidToPending(txnFuture)
	//is: InfoSchema
	s.sessionVars.TxnCtx = &variable.TransactionContext{
		//InfoSchema:
		//SchemaVersion:
		CreateTime: time.Now(),
	}
}
